#! /usr/bin/env python

'''
Make gradients between 2 files unique.
'''

import sys
import re
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

DESC = "Make gradients between 2 files unique."
RESTOP = re.compile('stop-color:#(?P<col>[0-9a-f]{6})')

NOCHANGE = "No gradients from %s needed changing - you're safe"
NOGRAD = "No gradients in %s - you're safe"

def chcol(col, diff):
    '''
    Change colour
    '''

    newcol = ''
    for channel in col[0:2], col[2:4], col[4:6]:
        channel = int('0x' + channel, 0)
        if channel - diff >= 0:
            newcol += '%02x' % (channel - diff)
        else:
            newcol += '%02x' % (channel + diff)
    return newcol

def parsesvg(insvgfile, known, outsvgfile): # pylint: disable=too-many-branches
    '''
    Parse SVG file in search for gradient information
    '''

    ingrad = False
    changed = False
    with open(insvgfile) as fhl:
        grads = set()
        for line in fhl:
            if '<linearGradient' in line:
                ingrad = True
                stops = []
                if known:
                    gradlines = []
                    print >> outsvgfile, line,
            elif ingrad and 'xlink:href' in line:
                # Not interested in referencing gradients which have no stops
                ingrad = False
                if known:
                    for gradline in gradlines:
                        print >> outsvgfile, gradline,
                    print >> outsvgfile, line,
            elif ingrad and '</linearGradient>' in line:
                ingrad = False

                stops = tuple(stops)
                if known:
                    # Change first stop until the gradient is unique
                    diff = 1
                    while stops in known:
                        stops = tuple([chcol(stops[0], diff)]) + stops[1:]
                        diff += 1
                        changed = True

                    # Rewrite the gradient
                    i = 0
                    for gradline in gradlines:
                        match = RESTOP.search(gradline)
                        if match:
                            print >> outsvgfile, \
                                gradline[:match.start('col')] + \
                                stops[i] + \
                                gradline[match.end('col'):],
                            i += 1
                        else:
                            print >> outsvgfile, gradline,

                    print >> outsvgfile, line,
                elif stops:
                    grads.add(stops)
            elif ingrad:
                match = RESTOP.search(line)
                if match:
                    stops.append(match.group('col'))

                if known:
                    gradlines.append(line)
            elif '</defs>' in line:
                if known:
                    print >> outsvgfile, line,
                else:
                    break
            elif known:
                print >> outsvgfile, line,

        if known and not changed:
            print >> sys.stderr, NOCHANGE % insvgfile

        return grads

def main(): # pylint: disable=missing-docstring
    # Parse arguments
    parser = ArgumentParser(description=DESC,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('insvgfile', metavar='INSVGFILE', nargs=2,
                        help="input SVG files, typically an empty one with \
                            just the gradient object and one with the complete \
                            destination drawing")
    parser.add_argument('outsvgfile', metavar='OUTSVGFILE',
                        help="output SVG file")
    args = parser.parse_args()

    # Split input files
    src, dst = args.insvgfile

    # Parse destination file
    grads = parsesvg(dst, [], None)

    # Parse source file
    if grads:
        with open(args.outsvgfile, 'w') as fhl:
            parsesvg(src, grads, fhl)
    else:
        print >> sys.stderr, NOGRAD % dst

if __name__ == '__main__':
    sys.exit(main())
