#! /usr/bin/env python

'''
Make gradients between 2 files unique.
'''

import sys
import re
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

DESC = "Make gradients between 2 files unique."
RESTOP = re.compile('stop-color:#(?P<col>[0-9a-f]{6})')

def chcol(col, diff):
    '''
    Change colour
    '''

    newcol = ''
    for channel in col[0:2], col[2:4], col[4:6]:
        channel = int('0x' + channel, 0)
        if channel > 0:
            newcol += '%02x' % (channel - diff)
        else:
            newcol += '%02x' % (channel + diff)
    return newcol

def parsesvg(svgfile, known):
    '''
    Parse SVG file in search for gradient information
    '''

    ingrad, instop = False, False
    with open(svgfile) as fhl:
        grads = set()
        for line in fhl:
            if '<linearGradient' in line:
                ingrad = True
                stops = []
                if known:
                    gradlines = []
                    print line,
            elif '</linearGradient>' in line or '/>' in line and not instop:
                ingrad = False

                stops = tuple(stops)
                if known:
                    # Change first stop until the gradient is unique
                    diff = 1
                    while stops in known:
                        diff += 1
                        stops = tuple([chcol(stops[0], diff)]) + stops[1:]

                    # Rewrite the gradient
                    i = 0
                    for gradline in gradlines:
                        match = RESTOP.search(gradline)
                        if match:
                            print gradline[:match.start('col')] + \
                                stops[i] + \
                                gradline[match.end('col'):],
                            i += 1
                        else:
                            print gradline,

                    print line,
                elif stops:
                    grads.add(stops)
            elif '<stop' in line:
                instop = True
                if known:
                    gradlines.append(line)
            elif '/>' in line and instop:
                instop = False
                if known:
                    gradlines.append(line)
            elif ingrad:
                match = RESTOP.search(line)
                if match:
                    stops.append(match.group('col'))

                if known:
                    gradlines.append(line)
            elif '</defs>' in line:
                if known:
                    pass
                    # print line,
                else:
                    break
            elif known:
                pass
                # print line,

        return grads

def main(): # pylint: disable=missing-docstring
    parser = ArgumentParser(description=DESC,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('insvgfile', metavar='INSVGFILE', nargs=2,
                        help="input SVG file")
    parser.add_argument('outsvgfile', metavar='OUTSVGFILE',
                        help="output SVG file")
    args = parser.parse_args()

    src, dst = args.insvgfile

    grads = parsesvg(dst, [])
    if grads:
        parsesvg(src, grads)
    else:
        print >> sys.stderr, "There's no gradients in %s - you're safe" % dst

if __name__ == '__main__':
    sys.exit(main())
